"use strict";(self.webpackChunksailpoint_developer_portal=self.webpackChunksailpoint_developer_portal||[]).push([[984],{73137:(t,e,n)=>{n.d(e,{Z:()=>w});var a=n(67294),o=n(86010),s=n(8757),i=n(73276),l=n(54939);const r={tabList:"tabList_fbd4",tabItem:"tabItem_v5XY"};var c=Object.defineProperty,u=Object.defineProperties,d=Object.getOwnPropertyDescriptors,p=Object.getOwnPropertySymbols,h=Object.prototype.hasOwnProperty,m=Object.prototype.propertyIsEnumerable,g=(t,e,n)=>e in t?c(t,e,{enumerable:!0,configurable:!0,writable:!0,value:n}):t[e]=n,f=(t,e)=>{for(var n in e||(e={}))h.call(e,n)&&g(t,n,e[n]);if(p)for(var n of p(e))m.call(e,n)&&g(t,n,e[n]);return t},v=(t,e)=>u(t,d(e));function b({className:t,block:e,selectedValue:n,selectValue:i,tabValues:l}){const c=[],{blockElementScrollPositionUntilNextRender:u}=(0,s.o5)(),d=t=>{const e=t.currentTarget,a=c.indexOf(e),o=l[a].value;o!==n&&(u(e),i(o))},p=t=>{var e,n;let a=null;switch(t.key){case"Enter":d(t);break;case"ArrowRight":{const n=c.indexOf(t.currentTarget)+1;a=null!=(e=c[n])?e:c[0];break}case"ArrowLeft":{const e=c.indexOf(t.currentTarget)-1;a=null!=(n=c[e])?n:c[c.length-1];break}}null==a||a.focus()};return a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,o.default)("tabs",{"tabs--block":e},t)},l.map((({value:t,label:e,attributes:s})=>a.createElement("li",v(f({role:"tab",tabIndex:n===t?0:-1,"aria-selected":n===t,key:t,ref:t=>c.push(t),onKeyDown:p,onClick:d},s),{className:(0,o.default)("tabs__item",r.tabItem,null==s?void 0:s.className,{"tabs__item--active":n===t})}),null!=e?e:t))))}function k({lazy:t,children:e,selectedValue:n}){const o=(Array.isArray(e)?e:[e]).filter(Boolean);if(t){const t=o.find((t=>t.props.value===n));return t?(0,a.cloneElement)(t,{className:"margin-top--md"}):null}return a.createElement("div",{className:"margin-top--md"},o.map(((t,e)=>(0,a.cloneElement)(t,{key:e,hidden:t.props.value!==n}))))}function y(t){const e=(0,i.Y)(t);return a.createElement("div",{className:(0,o.default)("tabs-container",r.tabList)},a.createElement(b,f(f({},t),e)),a.createElement(k,f(f({},t),e)))}function w(t){const e=(0,l.default)();return a.createElement(y,f({key:String(e)},t))}},50770:(t,e,n)=>{n.r(e),n.d(e,{assets:()=>k,contentTitle:()=>v,default:()=>C,frontMatter:()=>f,metadata:()=>b,toc:()=>y});var a=n(3905),o=n(73137),s=n(62574),i=Object.defineProperty,l=Object.defineProperties,r=Object.getOwnPropertyDescriptors,c=Object.getOwnPropertySymbols,u=Object.prototype.hasOwnProperty,d=Object.prototype.propertyIsEnumerable,p=(t,e,n)=>e in t?i(t,e,{enumerable:!0,configurable:!0,writable:!0,value:n}):t[e]=n,h=(t,e)=>{for(var n in e||(e={}))u.call(e,n)&&p(t,n,e[n]);if(c)for(var n of c(e))d.call(e,n)&&p(t,n,e[n]);return t},m=(t,e)=>l(t,r(e)),g=(t,e)=>{var n={};for(var a in t)u.call(t,a)&&e.indexOf(a)<0&&(n[a]=t[a]);if(null!=t&&c)for(var a of c(t))e.indexOf(a)<0&&d.call(t,a)&&(n[a]=t[a]);return n};const f={id:"udk-accounts-list",title:"Implementing the Account List Page",pagination_label:"UDK",sidebar_label:"Account List Page",sidebar_position:2,sidebar_class_name:"rudk",keywords:["UI","development","kit"],description:"Develop custom user interfaces.",slug:"/tools/ui-development-kit/accounts-list",tags:["UI"]},v=void 0,b={unversionedId:"tools/ui-development-kit/udk-accounts-list",id:"tools/ui-development-kit/udk-accounts-list",title:"Implementing the Account List Page",description:"Develop custom user interfaces.",source:"@site/docs/tools/ui-development-kit/accounts-list.mdx",sourceDirName:"tools/ui-development-kit",slug:"/tools/ui-development-kit/accounts-list",permalink:"/docs/tools/ui-development-kit/accounts-list",draft:!1,editUrl:"https://github.com/sailpoint-oss/developer-community-site/edit/main/docs/tools/ui-development-kit/accounts-list.mdx",tags:[{label:"UI",permalink:"/docs/tags/ui"}],version:"current",lastUpdatedBy:"GitHub Action Bot",lastUpdatedAt:1720812556,formattedLastUpdatedAt:"Jul 12, 2024",sidebarPosition:2,frontMatter:{id:"udk-accounts-list",title:"Implementing the Account List Page",pagination_label:"UDK",sidebar_label:"Account List Page",sidebar_position:2,sidebar_class_name:"rudk",keywords:["UI","development","kit"],description:"Develop custom user interfaces.",slug:"/tools/ui-development-kit/accounts-list",tags:["UI"]},sidebar:"openApiSidebar",previous:{title:"UDK",permalink:"/docs/tools/ui-development-kit/getting-started"},next:{title:"UDK",permalink:"/docs/tools/ui-development-kit/error-handling"}},k={},y=[{value:"Overview",id:"overview",level:2},{value:"Get account data",id:"get-account-data",level:2},{value:"Pagination",id:"pagination",level:2},{value:"Sort and filter",id:"sort-and-filter",level:2},{value:"Error Handling",id:"error-handling",level:2},{value:"Discuss",id:"discuss",level:2}],w={toc:y},x="wrapper";function C(t){var e=t,{components:n}=e,i=g(e,["components"]);return(0,a.kt)(x,m(h(h({},w),i),{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h2",h({},{id:"overview"}),"Overview"),(0,a.kt)("p",null,"This guide will walk you through the process of implementing a new page that lists all the accounts in your tenant. This serves as an example you can use to learn how to implement many different types of custom UI pages. "),(0,a.kt)("p",null,"This guide is a continuation of ",(0,a.kt)("a",h({parentName:"p"},{href:"./getting-started"}),"Getting Started"),". To implement a new page, you must have already created your routes and pages. To learn how to do so, refer to the ",(0,a.kt)("a",h({parentName:"p"},{href:"./getting-started#add-route-and-new-page"}),"Add New Route and Page section"),"."),(0,a.kt)("p",null,"At the end of this guide you will be able to do the following:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"List all accounts in your tenant"),(0,a.kt)("li",{parentName:"ul"},"Paginate accounts by page limits of 5, 10, 50, 100, 250"),(0,a.kt)("li",{parentName:"ul"},"Click through each page of results"),(0,a.kt)("li",{parentName:"ul"},"View the JSON response of the account from your tenant"),(0,a.kt)("li",{parentName:"ul"},"Sort the results, using the sort syntax on the ",(0,a.kt)("a",h({parentName:"li"},{href:"https://developer.sailpoint.com/docs/api/v3/list-accounts"}),"List Accounts endpoint"),"."),(0,a.kt)("li",{parentName:"ul"},"Filter the results, using the filter syntax on the ",(0,a.kt)("a",h({parentName:"li"},{href:"https://developer.sailpoint.com/docs/api/v3/list-accounts"}),"List Accounts endpoint"),".")),(0,a.kt)("h2",h({},{id:"get-account-data"}),"Get account data"),(0,a.kt)("p",null,"The first thing your new page needs to do is get the account data to show. You can implement this by using the ",(0,a.kt)("a",h({parentName:"p"},{href:"https://developer.sailpoint.com/docs/api/v3/list-accounts"}),"List Accounts endpoint"),"."),(0,a.kt)("p",null,"To do so, add this logic to the server side of the accounts list page at ",(0,a.kt)("inlineCode",{parentName:"p"},"src/routes/accounts/account-list/+page.server.ts"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",h({parentName:"pre"},{className:"language-typescript"}),"// Import classes needed\nimport {createConfiguration} from '$lib/sailpoint/sdk.js';\nimport type {Account} from 'sailpoint-api-client';\nimport {AccountsApi} from 'sailpoint-api-client';\n\nexport const load = async ({locals}) => {\n  // Create a typescript SDK configuration object using the\n  // baseUrl and access_token pulled from the logged in user.\n  const config = createConfiguration(\n    locals.session!.baseUrl,\n    locals.idnSession!.access_token,\n  );\n  // Initialize the api client for the account api\n  const api = new AccountsApi(config);\n\n  // Call list account with count=true so that we get the header of total accounts back\n  const reportResp = api.listAccounts({count: true});\n\n  const totalCount = new Promise<number>((resolve) => {\n    reportResp.then((response) => {\n      resolve(response.headers['x-total-count']);\n    });\n  });\n\n  const accountData = new Promise<Account[]>((resolve) => {\n    reportResp.then((response) => {\n      console.log(response.data); // Logs out the account response in the console\n      resolve(response.data);\n    });\n  });\n\n  // Return the data to the UI\n  return {accountData, totalCount};\n};\n")),(0,a.kt)("p",null,"Return to your accounts list page. In your IDE, you will see the response containing the accounts after the page loads."),(0,a.kt)("p",null,"Now that you have your account data, you need to display the data. You can add a table to the UI and display your results."),(0,a.kt)("p",null,"To do so, add this code to ",(0,a.kt)("inlineCode",{parentName:"p"},"src/routes/accounts/account-list/+page.svelte"),":"),(0,a.kt)("details",null,(0,a.kt)("summary",null,"Show Code"),(0,a.kt)("pre",null,(0,a.kt)("code",h({parentName:"pre"},{className:"language-html"}),'<script lang="ts">\n    import Progress from \'$lib/Components/Progress.svelte\';\n    import {\n        TriggerCodeModal,\n        formatDate\n    } from \'$lib/Utils.js\';\n    import { getModalStore } from \'@skeletonlabs/skeleton\';\n\n    export let data;\n\n    const modalStore = getModalStore();\n\n<\/script>\n\n<div class="flex justify-center flex-col align-middle gap-2">\n    <div class="card p-4">\n        <p class="text-2xl text-center">List of all accounts</p> \x3c!-- Page title --\x3e\n    </div>\n    {#await data.accountData}\n        <div class="grid h-full place-content-center p-8">\n            <Progress width="w-[100px]" />\n        </div>\n    {:then accountData}\n    \x3c!-- If there is no account data show a message to the user --\x3e\n        {#if accountData.length === 0} \n            <div class="card p-4">\n                <p class=" text-center text-success-500">No Accounts found</p>\n            </div>\n        {:else}\n            <div class="table-container">\n                <table class="table">\n                    <thead class="table-head"> \x3c!-- Table headers --\x3e\n                        <th> Name </th>\n                        <th> Native Identity </th>\n                        <th> Source </th>\n                        <th> Created </th>\n                        <th> Modified </th>\n                        <th> Authoritative </th>\n                        <th> Features </th>\n                        <th> Has Entitlements </th>\n                        <th></th>\n                    </thead>\n                    <tbody class="table-body">\n                        {#each accountData as account} \x3c!-- Create a table row for each account --\x3e\n                            <tr>\n                                <td>\n                                    {account.name}\n                                </td>\n                                <td>\n                                    {account.nativeIdentity}\n                                </td>\n                                <td>\n                                    {account.sourceName}\n                                </td>\n                                <td>\n                                    {formatDate(account.created)}\n                                </td>\n                                <td>\n                                    {formatDate(account.modified)}\n                                </td>\n                                <td>\n                                    {account.authoritative}\n                                </td>\n                                <td>\n                                    {account.features}\n                                </td>\n                                <td>\n                                    {account.hasEntitlements}\n                                </td>\n                                <td>\n                                    <div class="flex flex-col justify-center gap-1">\n                                        \x3c!-- Trigger code modal view to see raw account data --\x3e\n                                        <button\n                                            on:click={() => TriggerCodeModal(account, modalStore)}\n                                            class="btn btn-sm variant-filled-primary text-sm !text-white"\n                                        >\n                                            View\n                                        </button>\n                                    </div>\n                                </td>\n                            </tr>\n                        {/each}\n                    </tbody>\n                </table>\n            </div>\n        {/if}\n    {/await}\n</div>\n'))),(0,a.kt)("p",null,"Save the ",(0,a.kt)("inlineCode",{parentName:"p"},"+page.svelte")," file and return to the accounts list page. You will see up to 250 accounts in the table."),(0,a.kt)("h2",h({},{id:"pagination"}),"Pagination"),(0,a.kt)("p",null,"You will likely have more than 250 accounts in your tenant. To handle more than 250 accounts, you must implement pagination on your front end page.\nPagination is the process of paging through your records. With pagination, you can handle 1000 accounts in 4 pages of 250, for example. "),(0,a.kt)("p",null,"To implement pagination, add the following code. This code allows you to paginate accounts in groups of 5, 10, 50, 100 and 250, depending on your requirement:"),(0,a.kt)("p",null,"The highlighted portions of the code are the changes made to the previous code to allow pagination."),(0,a.kt)(o.Z,{mdxType:"Tabs"},(0,a.kt)(s.default,{value:"accounts_page",label:"account-list/+page.svelte",default:!0,mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",h({parentName:"pre"},{className:"language-html"}),'<script lang="ts">\n    // highlight-next-line\n    import Paginator from \'$lib/Components/Paginator.svelte\';\n    import Progress from \'$lib/Components/Progress.svelte\';\n    import {\n        TriggerCodeModal,\n        formatDate,\n        // highlight-start\n        createOnPageChange,\n        createOnAmountChange\n        // highlight-end\n    } from \'$lib/Utils.js\';\n    import { getModalStore } from \'@skeletonlabs/skeleton\';\n\n    export let data;\n\n    const modalStore = getModalStore();\n\n    // highlight-start\n    $: onPageChange = createOnPageChange(\n        { ...data.params, filters: \'\', sorters: \'\'},\n        \'/accounts/account-list\'\n    );\n    $: onAmountChange = createOnAmountChange(\n        { ...data.params, filters: \'\', sorters: \'\'},\n        \'/accounts/account-list\'\n    );\n    // highlight-end\n\n<\/script>\n\n<div class="flex justify-center flex-col align-middle gap-2">\n    <div class="card p-4">\n        <p class="text-2xl text-center">List of all accounts</p>\n    </div>\n    {#await data.accountData}\n        <div class="grid h-full place-content-center p-8">\n            <Progress width="w-[100px]" />\n        </div>\n    {:then accountData}\n    \x3c!-- highlight-start --\x3e\n        {#await data.totalCount then totalCount}\n            {#if totalCount > 250 || Number(data.params.limit) < totalCount}\n                <div class="card p-4">\n                    <Paginator\n                        {onAmountChange}\n                        {onPageChange}\n                        settings={{\n                            page: Number(data.params.page),\n                            limit: Number(data.params.limit),\n                            size: totalCount,\n                            amounts: [5, 10, 50, 100, 250]\n                        }}\n                        {totalCount}\n                    />\n                </div>\n            {/if}\n        {/await}\n        \x3c!-- highlight-end --\x3e\n        {#if accountData.length === 0}\n            <div class="card p-4">\n                <p class=" text-center text-success-500">No Accounts found</p>\n            </div>\n        {:else}\n            <div class="table-container">\n                <table class="table">\n                    <thead class="table-head">\n                        <th> Name </th>\n                        <th> Native Identity </th>\n                        <th> Source </th>\n                        <th> Created </th>\n                        <th> Modified </th>\n                        <th> Authoritative </th>\n                        <th> Features </th>\n                        <th> Has Entitlements </th>\n                        <th></th>\n                    </thead>\n                    <tbody class="table-body">\n                        {#each accountData as account}\n                            <tr>\n                                <td>\n                                    {account.name}\n                                </td>\n                                <td>\n                                    {account.nativeIdentity}\n                                </td>\n                                <td>\n                                    {account.sourceName}\n                                </td>\n                                <td>\n                                    {formatDate(account.created)}\n                                </td>\n                                <td>\n                                    {formatDate(account.modified)}\n                                </td>\n                                <td>\n                                    {account.authoritative}\n                                </td>\n                                <td>\n                                    {account.features}\n                                </td>\n                                <td>\n                                    {account.hasEntitlements}\n                                </td>\n                                <td>\n                                    <div class="flex flex-col justify-center gap-1">\n                                        <button\n                                            on:click={() => TriggerCodeModal(account, modalStore)}\n                                            class="btn btn-sm variant-filled-primary text-sm !text-white"\n                                        >\n                                            View\n                                        </button>\n                                    </div>\n                                </td>\n                            </tr>\n                        {/each}\n                    </tbody>\n                </table>\n            </div>\n        {/if}\n    {/await}\n</div>\n'))),(0,a.kt)(s.default,{value:"accounts_list_server",label:"accounts-list/+page.server.ts",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",h({parentName:"pre"},{className:"language-typescript"}),"import { createConfiguration } from '$lib/sailpoint/sdk.js';\n// highlight-next-line\nimport { getLimit, getPage } from '$lib/Utils.js';\nimport type { Account } from 'sailpoint-api-client';\nimport { AccountsApi } from 'sailpoint-api-client';\n\nexport const load = async ({ url, locals }) => {\n    const config = createConfiguration(locals.session!.baseUrl, locals.idnSession!.access_token);\n    const api = new AccountsApi(config);\n\n    // highlight-start\n    const page = getPage(url);\n    const limit = getLimit(url);\n    // highlight-end\n\n    // highlight-next-line\n    const reportResp = api.listAccounts({count: true, limit: Number(limit), offset: Number(page) * Number(limit)});\n\n    const totalCount = new Promise<number>((resolve) => {\n        reportResp.then((response) => {\n            resolve(response.headers['x-total-count']);\n        });\n    });\n\n    const accountData = new Promise<Account[]>((resolve) => {\n        reportResp.then((response) => {\n            resolve(response.data);\n        });\n    });\n\n    // highlight-next-line\n    return { accountData, totalCount, params: {page, limit}};\n};\n\n")))),(0,a.kt)("p",null,"Return to the accounts list page. You will see the paginator at the top of the page. You can now paginate through the accounts in your tenant."),(0,a.kt)("h2",h({},{id:"sort-and-filter"}),"Sort and filter"),(0,a.kt)("p",null,"To better view and organize the data displayed in your accounts list page, you may want to implement sorting and filtering.\nSorting is the process of organizing the data. You may want to provide users with a way to sort the data in ascending or descending alphabetical order based on the account name, for example.\nFiltering is the process of limiting the displayed data based on specified details. You may want to provide users with a way to filter the data to only include accounts associated with one source, for example. "),(0,a.kt)("p",null,"To implement sorting and filtering, add the following highlighted code. It allows you to sort and filter the accounts in your tenant:"),(0,a.kt)("p",null,"With this implementation, once a user types in a filter or sorter and clicks the 'Go' button, the UI Development Kit calls the ",(0,a.kt)("inlineCode",{parentName:"p"},"onCreateGo")," function and reloads the page with the new sorters and filters."),(0,a.kt)("p",null,"On the server side, the kit uses the ",(0,a.kt)("inlineCode",{parentName:"p"},"getFilters")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"getSorters")," functions to get the filters and sorters from the URL.\nThe kit then passes these functions to the ",(0,a.kt)("a",h({parentName:"p"},{href:"https://developer.sailpoint.com/docs/api/v3/list-accounts"}),"List Accounts endpoint")," to filter and sort the accounts."),(0,a.kt)(o.Z,{mdxType:"Tabs"},(0,a.kt)(s.default,{value:"accounts_page",label:"account-list/+page.svelte",default:!0,mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",h({parentName:"pre"},{className:"language-typescript"}),'<script lang="ts">\n    import Paginator from \'$lib/Components/Paginator.svelte\';\n    import Progress from \'$lib/Components/Progress.svelte\';\n    import {\n        TriggerCodeModal,\n        formatDate,\n        createOnPageChange,\n        createOnAmountChange,\n        // highlight-next-line\n        createOnGo\n    } from \'$lib/Utils.js\';\n    import { getModalStore } from \'@skeletonlabs/skeleton\';\n\n    export let data;\n\n    const modalStore = getModalStore();\n\n    $: onPageChange = createOnPageChange(\n        { ...data.params, filters, sorters},\n        \'/accounts/account-list\'\n    );\n    $: onAmountChange = createOnAmountChange(\n        { ...data.params, filters, sorters},\n        \'/accounts/account-list\'\n    );\n    // highlight-start\n    $: onGo = createOnGo(\n        { ...data.params, filters, sorters },\n        \'/accounts/account-list\'\n    );\n\n    let filters = data.params.filters || \'\';\n    let sorters = data.params.sorters || \'\';\n    // highlight-end\n<\/script>\n\n<div class="flex justify-center flex-col align-middle gap-2">\n    <div class="card p-4">\n        <p class="text-2xl text-center">List of all accounts</p>\n    </div>\n    {#await data.accountData}\n        <div class="grid h-full place-content-center p-8">\n            <Progress width="w-[100px]" />\n        </div>\n    {:then accountData}\n        {#await data.totalCount then totalCount}\n            {#if totalCount > 250 || Number(data.params.limit) < totalCount}\n                <div class="card p-4">\n                    <Paginator\n                        {onAmountChange}\n                        // highlight-next-line\n                        {onGo}\n                        {onPageChange}\n                        settings={{\n                            page: Number(data.params.page),\n                            limit: Number(data.params.limit),\n                            size: totalCount,\n                            amounts: [5, 10, 50, 100, 250]\n                        }}\n                        // highlight-start\n                        bind:sorters\n                        bind:filters\n                        // highlight-end\n                        {totalCount}\n                    />\n                </div>\n            {/if}\n        {/await}\n        {#if accountData.length === 0}\n            <div class="card p-4">\n                <p class=" text-center text-success-500">No Accounts found</p>\n            </div>\n        {:else}\n            <div class="table-container">\n                <table class="table">\n                    <thead class="table-head">\n                        <th> Name </th>\n                        <th> Native Identity </th>\n                        <th> Source </th>\n                        <th> Created </th>\n                        <th> Modified </th>\n                        <th> Authoritative </th>\n                        <th> Features </th>\n                        <th> Has Entitlements </th>\n                        <th></th>\n                    </thead>\n                    <tbody class="table-body">\n                        {#each accountData as account}\n                            <tr>\n                                <td>\n                                    {account.name}\n                                </td>\n                                <td>\n                                    {account.nativeIdentity}\n                                </td>\n                                <td>\n                                    {account.sourceName}\n                                </td>\n                                <td>\n                                    {formatDate(account.created)}\n                                </td>\n                                <td>\n                                    {formatDate(account.modified)}\n                                </td>\n                                <td>\n                                    {account.authoritative}\n                                </td>\n                                <td>\n                                    {account.features}\n                                </td>\n                                <td>\n                                    {account.hasEntitlements}\n                                </td>\n                                <td>\n                                    <div class="flex flex-col justify-center gap-1">\n                                        <button\n                                            on:click={() => TriggerCodeModal(account, modalStore)}\n                                            class="btn btn-sm variant-filled-primary text-sm !text-white"\n                                        >\n                                            View\n                                        </button>\n                                    </div>\n                                </td>\n                            </tr>\n                        {/each}\n                    </tbody>\n                </table>\n            </div>\n        {/if}\n    {/await}\n</div>\n'))),(0,a.kt)(s.default,{value:"accounts_list_server",label:"accounts-list/+page.server.ts",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",h({parentName:"pre"},{className:"language-typescript"}),"import { createConfiguration } from '$lib/sailpoint/sdk.js';\n// highlight-next-line\nimport { getFilters, getLimit, getPage, getSorters } from '$lib/Utils.js';\nimport type { Account } from 'sailpoint-api-client';\nimport { AccountsApi } from 'sailpoint-api-client';\n\nexport const load = async ({ url, locals }) => {\n    const config = createConfiguration(locals.session!.baseUrl, locals.idnSession!.access_token);\n    const api = new AccountsApi(config);\n\n    const page = getPage(url);\n    const limit = getLimit(url);\n    // highlight-start\n    const sorters = getSorters(url);\n    const filters = getFilters(url);\n    // highlight-end\n\n    // highlight-next-line\n    const reportResp = api.listAccounts({count: true, sorters: sorters, filters: filters, limit: Number(limit), offset: Number(page) * Number(limit)});\n\n    const totalCount = new Promise<number>((resolve) => {\n        reportResp.then((response) => {\n            resolve(response.headers['x-total-count']);\n        });\n    });\n\n    const accountData = new Promise<Account[]>((resolve) => {\n        reportResp.then((response) => {\n            resolve(response.data);\n        });\n    });\n\n    // highlight-next-line\n    return { accountData, totalCount, params: {page, limit, sorters, filters}};\n};\n")))),(0,a.kt)("h2",h({},{id:"error-handling"}),"Error Handling"),(0,a.kt)("p",null,"You have now implemented a new page that lists all the accounts in your tenant, and you can now paginate, sort and filter the accounts in your tenant. "),(0,a.kt)("p",null,"Ideally, everything in your custom UIs will work smoothly, but you will likely encounter errors at some point when you're implementing a page. If you provide an invalid filter or sorter, the list accounts endpoint will return a 400 error, for example.\nYou can handle this error by adding a ",(0,a.kt)("inlineCode",{parentName:"p"},"try catch")," block to the server side of the accounts list page."),(0,a.kt)("p",null,"To learn more about handling errors in your UI, refer to ",(0,a.kt)("a",h({parentName:"p"},{href:"./error-handling"}),"Error Handling"),". "),(0,a.kt)("h2",h({},{id:"discuss"}),"Discuss"),(0,a.kt)("p",null,"The most valuable resource for ISC developers is the SailPoint Developer Community itself, where ISC users and experts all over the world come together to ask questions and provide solutions. "),(0,a.kt)("p",null,"To learn more about the ISC UI Development Kit and discuss it with SailPoint Developer Community members, go to the ",(0,a.kt)("a",h({parentName:"p"},{href:"https://developer.sailpoint.com/discuss/c/identity-security-cloud/6"}),"SailPoint Developer Community Forum"),"."))}C.isMDXComponent=!0}}]);