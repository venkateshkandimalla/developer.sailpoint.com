"use strict";(self.webpackChunksailpoint_developer_portal=self.webpackChunksailpoint_developer_portal||[]).push([[20592],{357:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>k,contentTitle:()=>g,default:()=>N,frontMatter:()=>b,metadata:()=>h,toc:()=>f});var i=a(3905),n=Object.defineProperty,l=Object.defineProperties,r=Object.getOwnPropertyDescriptors,o=Object.getOwnPropertySymbols,s=Object.prototype.hasOwnProperty,u=Object.prototype.propertyIsEnumerable,d=(e,t,a)=>t in e?n(e,t,{enumerable:!0,configurable:!0,writable:!0,value:a}):e[t]=a,p=(e,t)=>{for(var a in t||(t={}))s.call(t,a)&&d(e,a,t[a]);if(o)for(var a of o(t))u.call(t,a)&&d(e,a,t[a]);return e},m=(e,t)=>l(e,r(t)),c=(e,t)=>{var a={};for(var i in e)s.call(e,i)&&t.indexOf(i)<0&&(a[i]=e[i]);if(null!=e&&o)for(var i of o(e))t.indexOf(i)<0&&u.call(e,i)&&(a[i]=e[i]);return a};const b={id:"buildmap-rule",title:"BuildMap Rule",pagination_label:"BuildMap Rule",sidebar_label:"BuildMap Rule",sidebar_class_name:"buildMapRule",keywords:["cloud","rules"],description:"This rule manipulates raw input data provided by the rows and columns in a file and builds a map from the incoming data.",slug:"/extensibility/rules/cloud-rules/buildmap-rule",tags:["Rules"]},g="BuildMap Rule",h={unversionedId:"extensibility/rules/cloud-rules/buildmap-rule",id:"extensibility/rules/cloud-rules/buildmap-rule",title:"BuildMap Rule",description:"This rule manipulates raw input data provided by the rows and columns in a file and builds a map from the incoming data.",source:"@site/docs/extensibility/rules/cloud-rules/build_map_rule.md",sourceDirName:"extensibility/rules/cloud-rules",slug:"/extensibility/rules/cloud-rules/buildmap-rule",permalink:"/docs/extensibility/rules/cloud-rules/buildmap-rule",draft:!1,editUrl:"https://github.com/sailpoint-oss/developer-community-site/edit/main/docs/extensibility/rules/cloud-rules/build_map_rule.md",tags:[{label:"Rules",permalink:"/docs/tags/rules"}],version:"current",lastUpdatedBy:"GitHub Action Bot",lastUpdatedAt:1720812556,formattedLastUpdatedAt:"Jul 12, 2024",frontMatter:{id:"buildmap-rule",title:"BuildMap Rule",pagination_label:"BuildMap Rule",sidebar_label:"BuildMap Rule",sidebar_class_name:"buildMapRule",keywords:["cloud","rules"],description:"This rule manipulates raw input data provided by the rows and columns in a file and builds a map from the incoming data.",slug:"/extensibility/rules/cloud-rules/buildmap-rule",tags:["Rules"]},sidebar:"openApiSidebar",previous:{title:"Before Provisioning Rule",permalink:"/docs/extensibility/rules/cloud-rules/before-provisioning-rule"},next:{title:"Correlation Rule",permalink:"/docs/extensibility/rules/cloud-rules/correlation-rule"}},k={},f=[{value:"Overview",id:"overview",level:2}],y={toc:f},v="wrapper";function N(e){var t=e,{components:n}=t,l=c(t,["components"]);return(0,i.kt)(v,m(p(p({},y),l),{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",p({},{id:"buildmap-rule"}),"BuildMap Rule"),(0,i.kt)("h2",p({},{id:"overview"}),"Overview"),(0,i.kt)("p",null,"This rule manipulates raw input data provided by the rows and columns in a file and builds a map from the incoming data. Use this rule to create a new value by combining two columns together. For example, if one column was ",(0,i.kt)("inlineCode",{parentName:"p"},"access")," and another ",(0,i.kt)("inlineCode",{parentName:"p"},"permissions")," you could combine these together to create an entitlement ",(0,i.kt)("inlineCode",{parentName:"p"},"admin-read"),"."),(0,i.kt)("admonition",p({},{title:"This rule runs in the cloud, but it's really a connector rule because it executes against the DelimitedFileConnector. :::",type:"info"}),(0,i.kt)("h2",p({parentName:"admonition"},{id:"execution"}),"Execution"),(0,i.kt)("ul",{parentName:"admonition"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Cloud Execution")," - This rule executes in the Identity Security Cloud cloud, and has read-only access to the records from the Delimited File being imported. However, it doesn't have access to on-premise sources or connectors."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("strong",{parentName:"li"},"Logging")," - Logging statements are currently only visible to SailPoint personnel.")),(0,i.kt)("p",{parentName:"admonition"},(0,i.kt)("img",{alt:"Rule Execution",src:a(44490).Z,width:"1594",height:"635"})),(0,i.kt)("h2",p({parentName:"admonition"},{id:"input"}),"Input"),(0,i.kt)("table",{parentName:"admonition"},(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",p({parentName:"tr"},{align:null}),"Argument"),(0,i.kt)("th",p({parentName:"tr"},{align:null}),"Type"),(0,i.kt)("th",p({parentName:"tr"},{align:null}),"Purpose"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",p({parentName:"tr"},{align:null}),"cols"),(0,i.kt)("td",p({parentName:"tr"},{align:null}),"java.util.List"),(0,i.kt)("td",p({parentName:"tr"},{align:null}),"Ordered list of the column names from the file\u2019s header records or specified columns list.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",p({parentName:"tr"},{align:null}),"record"),(0,i.kt)("td",p({parentName:"tr"},{align:null}),"java.util.List"),(0,i.kt)("td",p({parentName:"tr"},{align:null}),"Ordered list of the values for the current record, parsed based on the specified delimiter.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",p({parentName:"tr"},{align:null}),"application"),(0,i.kt)("td",p({parentName:"tr"},{align:null}),"System.Collections.Hashtable"),(0,i.kt)("td",p({parentName:"tr"},{align:null}),"Map of the application configuration.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",p({parentName:"tr"},{align:null}),"schema"),(0,i.kt)("td",p({parentName:"tr"},{align:null}),"sailpoint.object.Schema"),(0,i.kt)("td",p({parentName:"tr"},{align:null}),"Reference to the schema object for the delimited file source being read.")))),(0,i.kt)("h2",p({parentName:"admonition"},{id:"template"}),"Template"),(0,i.kt)("pre",{parentName:"admonition"},(0,i.kt)("code",p({parentName:"pre"},{className:"language-xml"}),'<?xml version=\'1.0\' encoding=\'UTF-8\'?>\n<!DOCTYPE Rule PUBLIC "sailpoint.dtd" "sailpoint.dtd">\n<Rule name="Example Rule" type="BuildMap">\n  <Description>Describe your rule here.</Description>\n  <Source><![CDATA[\n\n  // Add your logic here.\n\n  ]]></Source>\n</Rule>\n')),(0,i.kt)("h2",p({parentName:"admonition"},{id:"example"}),"Example"),(0,i.kt)("pre",{parentName:"admonition"},(0,i.kt)("code",p({parentName:"pre"},{className:"language-java"}),'<?xml version=\'1.0\' encoding=\'UTF-8\'?>\n<!DOCTYPE Rule PUBLIC "sailpoint.dtd" "sailpoint.dtd">\n<Rule name="Example Rule" type="BuildMap">\n  <Description>This basic rule performs the combines 2 values into a single attribute.</Description>\n  <Source><![CDATA[\n\n     import sailpoint.connector.DelimitedFileConnector;\n\n     Map map = DelimitedFileConnector.defaultBuildMap( cols, record );\n     String access = (String) map.get( "access" );\n     String permission = (String) map.get( "permission" );\n\n     if ( access != null && permission != null ) {\n          map.remove("access");\n          map.remove("permission");\n          map.put("access", access + " - " + permission);\n     }\n     return map;\n\n  ]]></Source>\n</Rule>\n'))))}N.isMDXComponent=!0},44490:(e,t,a)=>{a.d(t,{Z:()=>i});const i=a.p+"assets/images/cloud_execution-7029b7fdcb50a6ea04ef055f18117067.png"}}]);