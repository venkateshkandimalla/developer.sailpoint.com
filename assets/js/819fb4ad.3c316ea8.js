"use strict";(self.webpackChunksailpoint_developer_portal=self.webpackChunksailpoint_developer_portal||[]).push([[81767],{68377:(t,e,n)=>{n.r(e),n.d(e,{assets:()=>f,contentTitle:()=>g,default:()=>A,frontMatter:()=>y,metadata:()=>h,toc:()=>v});var o=n(3905),a=Object.defineProperty,c=Object.defineProperties,i=Object.getOwnPropertyDescriptors,r=Object.getOwnPropertySymbols,s=Object.prototype.hasOwnProperty,d=Object.prototype.propertyIsEnumerable,l=(t,e,n)=>e in t?a(t,e,{enumerable:!0,configurable:!0,writable:!0,value:n}):t[e]=n,u=(t,e)=>{for(var n in e||(e={}))s.call(e,n)&&l(t,n,e[n]);if(r)for(var n of r(e))d.call(e,n)&&l(t,n,e[n]);return t},p=(t,e)=>c(t,i(e)),m=(t,e)=>{var n={};for(var o in t)s.call(t,o)&&e.indexOf(o)<0&&(n[o]=t[o]);if(null!=t&&r)for(var o of r(t))e.indexOf(o)<0&&d.call(t,o)&&(n[o]=t[o]);return n};const y={id:"account-read",title:"Account Read",pagination_label:"Account Read",sidebar_label:"Account Read",keywords:["connectivity","connectors","account read"],description:"Aggregate a single account from the source into Identity Security Cloud.",slug:"/connectivity/saas-connectivity/commands/account-read",tags:["Connectivity","Connector Command"]},g=void 0,h={unversionedId:"connectivity/saas-connectivity/connector-commands/account-read",id:"connectivity/saas-connectivity/connector-commands/account-read",title:"Account Read",description:"Aggregate a single account from the source into Identity Security Cloud.",source:"@site/docs/connectivity/saas-connectivity/connector-commands/account-read.md",sourceDirName:"connectivity/saas-connectivity/connector-commands",slug:"/connectivity/saas-connectivity/commands/account-read",permalink:"/docs/connectivity/saas-connectivity/commands/account-read",draft:!1,editUrl:"https://github.com/sailpoint-oss/developer-community-site/edit/main/docs/connectivity/saas-connectivity/connector-commands/account-read.md",tags:[{label:"Connectivity",permalink:"/docs/tags/connectivity"},{label:"Connector Command",permalink:"/docs/tags/connector-command"}],version:"current",lastUpdatedBy:"GitHub Action Bot",lastUpdatedAt:1720812556,formattedLastUpdatedAt:"Jul 12, 2024",frontMatter:{id:"account-read",title:"Account Read",pagination_label:"Account Read",sidebar_label:"Account Read",keywords:["connectivity","connectors","account read"],description:"Aggregate a single account from the source into Identity Security Cloud.",slug:"/connectivity/saas-connectivity/commands/account-read",tags:["Connectivity","Connector Command"]},sidebar:"openApiSidebar",previous:{title:"Account List",permalink:"/docs/connectivity/saas-connectivity/commands/account-list"},next:{title:"Account Unlock",permalink:"/docs/connectivity/saas-connectivity/commands/account-unlock"}},f={},v=[{value:"Example StdAccountReadInput",id:"example-stdaccountreadinput",level:3},{value:"Example StdAccountReadOutput",id:"example-stdaccountreadoutput",level:3},{value:"Description",id:"description",level:2},{value:"Implementation",id:"implementation",level:2}],k={toc:v},b="wrapper";function A(t){var e=t,{components:a}=e,c=m(e,["components"]);return(0,o.kt)(b,p(u(u({},k),c),{components:a,mdxType:"MDXLayout"}),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",u({parentName:"tr"},{align:"left"}),"Input/Output"),(0,o.kt)("th",u({parentName:"tr"},{align:"center"}),"Data Type"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",u({parentName:"tr"},{align:"left"}),"Input"),(0,o.kt)("td",u({parentName:"tr"},{align:"center"}),"StdAccountReadInput")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",u({parentName:"tr"},{align:"left"}),"Output"),(0,o.kt)("td",u({parentName:"tr"},{align:"center"}),"StdAccountReadOutput")))),(0,o.kt)("h3",u({},{id:"example-stdaccountreadinput"}),"Example StdAccountReadInput"),(0,o.kt)("pre",null,(0,o.kt)("code",u({parentName:"pre"},{className:"language-javascript"}),'"identity": "john.doe",\n"key": {\n    "simple": {\n        "id": "john.doe"\n    }\n}\n')),(0,o.kt)("h3",u({},{id:"example-stdaccountreadoutput"}),"Example StdAccountReadOutput"),(0,o.kt)("pre",null,(0,o.kt)("code",u({parentName:"pre"},{className:"language-javascript"}),'{\n    "key": {\n        "simple": {\n            "id": "john.doe"\n        }\n    },\n    "disabled": false,\n    "locked": false,\n    "attributes": {\n        "id": "john.doe",\n        "displayName": "John Doe",\n        "email": "example@sailpoint.com",\n        "entitlements": [\n            "administrator",\n            "sailpoint"\n        ]\n    }\n}\n')),(0,o.kt)("h2",u({},{id:"description"}),"Description"),(0,o.kt)("p",null,"The account read command aggregates a single account from the target source into Identity Security Cloud. ISC can call this command during a \u201cone-off\u201d account refresh, which you can trigger by aggregating an individual account in ISC."),(0,o.kt)("p",null,"To use this command, you must specify this value in the ",(0,o.kt)("inlineCode",{parentName:"p"},"commands")," array: ",(0,o.kt)("inlineCode",{parentName:"p"},"std:account:read")),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"Account Read",src:n(23055).Z,width:"2558",height:"1308"})),(0,o.kt)("h2",u({},{id:"implementation"}),"Implementation"),(0,o.kt)("p",null,"Implementation of account read is similar to account list's implementation, except the code only needs to get one account, not all the accounts. The following snippet is from ",(0,o.kt)("a",u({parentName:"p"},{href:"https://github.com/sailpoint-oss/airtable-example-connector/blob/main/src/airtable.ts"}),"airtable.ts"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",u({parentName:"pre"},{className:"language-javascript"}),"async getAccount(identity: SimpleKeyType | CompoundKeyType): Promise<AirtableAccount> {\n    const id = <SimpleKeyType>identity\n    let found = false\n\n    return this.airTableBase('Users').select({\n        view: 'Grid view',\n        filterByFormula: `({Id} = '${id.simple.id}')`\n    }).firstPage().then(records => {\n        const recordArray: Array<AirtableAccount> = []\n        for (const record of records) {\n            found = true\n            recordArray.push(AirtableAccount.createWithRecords(record))\n        }\n        return recordArray[0]\n    }).catch(err => {\n        throw new ConnectorError('error while getting account: ' + err)\n    }).finally(() => {\n        // if the account is not found, throw the special NotFound error type\n        if (!found) {\n            throw new ConnectorError(\"Account not found\", ConnectorErrorType.NotFound)\n        }\n    })\n}\n")),(0,o.kt)("p",null,"One special case of this command is the ",(0,o.kt)("inlineCode",{parentName:"p"},"NotFound")," type. On line 20, if an account is not found, the ",(0,o.kt)("inlineCode",{parentName:"p"},"ConnectorError")," is thrown with the ",(0,o.kt)("inlineCode",{parentName:"p"},"ConnectorErrorType.NotFound")," type. This tells ISC the account does not exist, and ISC then triggers the account create logic to generate the account."),(0,o.kt)("p",null,"The following code snippet from ",(0,o.kt)("a",u({parentName:"p"},{href:"https://github.com/sailpoint-oss/airtable-example-connector/blob/main/src/index.ts"}),"index.ts")," shows how to register the account read command on the connector object:"),(0,o.kt)("pre",null,(0,o.kt)("code",u({parentName:"pre"},{className:"language-javascript"}),"// Connector must be exported as module property named connector\nexport const connector = async () => {\n\n    // Get connector source config\n    const config = await readConfig()\n\n    // Use the vendor SDK, or implement own client as necessary, to initialize a client\n    const airtable = new AirtableClient(config)\n\n    return createConnector()\n        .stdAccountRead(async (context: Context, input: StdAccountReadInput, res: Response<StdAccountReadOutput>) => {\n            const account = await airtable.getAccount(input.key)\n\n            res.send(account.toStdAccountReadOutput())\n        })\n...\n")))}A.isMDXComponent=!0},23055:(t,e,n)=>{n.d(e,{Z:()=>o});const o=n.p+"assets/images/account_read_idn-4fc336ce24816010e43fdcd3858dd960.png"}}]);