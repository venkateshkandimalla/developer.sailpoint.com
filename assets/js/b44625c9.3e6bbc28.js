"use strict";(self.webpackChunksailpoint_developer_portal=self.webpackChunksailpoint_developer_portal||[]).push([[45134],{31199:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>y,contentTitle:()=>m,default:()=>v,frontMatter:()=>g,metadata:()=>f,toc:()=>k});var s=r(3905),n=Object.defineProperty,o=Object.defineProperties,i=Object.getOwnPropertyDescriptors,a=Object.getOwnPropertySymbols,l=Object.prototype.hasOwnProperty,p=Object.prototype.propertyIsEnumerable,d=(e,t,r)=>t in e?n(e,t,{enumerable:!0,configurable:!0,writable:!0,value:r}):e[t]=r,c=(e,t)=>{for(var r in t||(t={}))l.call(t,r)&&d(e,r,t[r]);if(a)for(var r of a(t))p.call(t,r)&&d(e,r,t[r]);return e},u=(e,t)=>o(e,i(t)),h=(e,t)=>{var r={};for(var s in e)l.call(e,s)&&t.indexOf(s)<0&&(r[s]=e[s]);if(null!=e&&a)for(var s of a(e))t.indexOf(s)<0&&p.call(e,s)&&(r[s]=e[s]);return r};const g={id:"typescript-sdk-error-handling",title:"Error Handling with The TypeScript SDK",pagination_label:"Error Handling",sidebar_label:"Error Handling",sidebar_position:8,sidebar_class_name:"typescriptsdk",keywords:["tsc","typescript","sdk","error"],description:"Learn how to configure error handling when using the TypeScript SDK.",slug:"/tools/sdk/typescript/error-handling",tags:["SDK"]},m=void 0,f={unversionedId:"tools/sdk/typescript/typescript-sdk-error-handling",id:"tools/sdk/typescript/typescript-sdk-error-handling",title:"Error Handling with The TypeScript SDK",description:"Learn how to configure error handling when using the TypeScript SDK.",source:"@site/docs/tools/sdk/typescript/error-handling.md",sourceDirName:"tools/sdk/typescript",slug:"/tools/sdk/typescript/error-handling",permalink:"/docs/tools/sdk/typescript/error-handling",draft:!1,editUrl:"https://github.com/sailpoint-oss/developer-community-site/edit/main/docs/tools/sdk/typescript/error-handling.md",tags:[{label:"SDK",permalink:"/docs/tags/sdk"}],version:"current",lastUpdatedBy:"GitHub Action Bot",lastUpdatedAt:1720812556,formattedLastUpdatedAt:"Jul 12, 2024",sidebarPosition:8,frontMatter:{id:"typescript-sdk-error-handling",title:"Error Handling with The TypeScript SDK",pagination_label:"Error Handling",sidebar_label:"Error Handling",sidebar_position:8,sidebar_class_name:"typescriptsdk",keywords:["tsc","typescript","sdk","error"],description:"Learn how to configure error handling when using the TypeScript SDK.",slug:"/tools/sdk/typescript/error-handling",tags:["SDK"]},sidebar:"openApiSidebar",previous:{title:"Retries",permalink:"/docs/tools/sdk/typescript/retries"},next:{title:"RDK",permalink:"/docs/tools/rule-development-kit"}},y={},k=[],b={toc:k},w="wrapper";function v(e){var t=e,{components:r}=t,n=h(t,["components"]);return(0,s.kt)(w,u(c(c({},b),n),{components:r,mdxType:"MDXLayout"}),(0,s.kt)("p",null,"The TypeScript SDK uses the Axios library to handle HTTP requests. Axios will throw an error for any response status that falls outside the range of 2xx. A non-2xx response will immediately halt the program and produce a stack trace. Axios provides two methods for gracefully handling error responses from an API."),(0,s.kt)("p",null,"The first method is to use a ",(0,s.kt)("inlineCode",{parentName:"p"},"catch")," function to intercept any unsuccessful response and take actions on the results, such as logging the message or performing additional actions before exiting the program:"),(0,s.kt)("pre",null,(0,s.kt)("code",c({parentName:"pre"},{className:"language-typescript",metastring:"showLineNumbers",showLineNumbers:!0}),"// Catch any non 2xx response and log the error message and metadata\nlet transforms = await api.listTransforms().catch(function (error) {\n  console.log(error.response.data);\n  console.log(error.response.status);\n  console.log(error.response.headers);\n});\n")),(0,s.kt)("p",null,"The second method is to define which HTTP status codes should throw an error for a given request using the ",(0,s.kt)("inlineCode",{parentName:"p"},"validateStatus")," option. This gives you an opportunity to recover from a bad request without exiting the program."),(0,s.kt)("p",null,"If you don't want the program to exit for 4xx response codes, you can use this configuration:"),(0,s.kt)("pre",null,(0,s.kt)("code",c({parentName:"pre"},{className:"language-typescript",metastring:"showLineNumbers",showLineNumbers:!0}),"// Resolve only if the status code is less than 500\nlet transforms = await api.listTransforms(\n  {filters: 'id eq'},\n  {\n    validateStatus: function (status) {\n      return status < 500;\n    },\n  },\n);\n\nif (transforms.status === 200) {\n  console.log(transforms);\n} else if (transforms.status === 400) {\n  console.log('The filter is invalid.  Continuing execution.');\n}\n")),(0,s.kt)("p",null,"If you don't want the program to exit for any error response, you can use this configuration:"),(0,s.kt)("pre",null,(0,s.kt)("code",c({parentName:"pre"},{className:"language-typescript"}),"await api.listTransforms(\n  {},\n  {\n    validateStatus: function (status) {\n      return true;\n    },\n  },\n);\n")))}v.isMDXComponent=!0}}]);